""" Functions used for running the acquisition of kinematics """

import videotools as vt
import os
import pandas as pd
import numpy as np

def report_version():

    print("v.6")

def get_cat_info(cat_path):
    """ Extracts key parameters from experiment catalog for making videos from image sequence.
    Videos included are the ones where analyze==1 and make_video==1.
    
    cat_path:  Full path to video catalog (CSV file)
    """

    # Open CSV file
    file = open(cat_path)

    # Import CSV data
    d = pd.read_csv(file)

    # Extract only the 'analyze==1' rows
    d = d.loc[(d.analyze == 1) & (d.make_video == 1)]

    # Reset indices for the new rows
    d = d.reset_index(drop=True)

    # df2.set_index(pd.Index([0, 1, 2]))
    # Number of videos to analyze
    # nVids = int(np.nansum(d.analyze))

    # Extract mandatory parameters
    date = d.date.astype(str)
    trial_num = d.trial_num.astype(int)
    fps_in = d.fps.astype(float)

    # If roi is provided. Imported as str, to allow for empty cells. Converted to int in next cell
    if 'roi_x' in d:
        roi_x = d.roi_x.astype(str)
        roi_y = d.roi_y.astype(str)
        roi_w = d.roi_w.astype(str)
        roi_h = d.roi_h.astype(str)

    else:
        roi_x = pd.Series(index=d.index, dtype="str")
        roi_y = roi_x
        roi_w = roi_x
        roi_h = roi_x

    # If image filenames are included
    if 'start_image_filename' in d:
        start_imagename = d.start_image_filename.astype(str)
        end_imagename = d.end_image_filename.astype(str)
    else:
        start_imagename = None
        end_imagename = None

    if 'video_filename' in d:
        video_filename = d.video_filename.astype(str)
    else:
        video_filename = None

    # Close CSV file
    file.close()

    d_frame = {'date': date,
               'exp_num': trial_num,
               'fps': fps_in,
               'video_filename': video_filename,
               'roi_x': roi_x,
               'roi_y': roi_y,
               'roi_w': roi_w,
               'roi_h': roi_h,
               'start_imagename': start_imagename,
               'end_imagename': end_imagename
               }

    df = pd.DataFrame(d_frame)

    return df


def make_videos(df, im_path, vid_path, vmode=False, vertpix=None, suffix_in='JPG', suffix_out='mp4', ndigits=5, prefix='DSC', imquality=0.35):
    """ Uses videotools to create videos from the image sequences from the experiments 
    
    df: dataframe generated by get_cat_info with the info needed for each video where analyze==1 and make_video==1.
    im_path: Root directory that holds the directories named for the date of the experiment.
    vid_path: Path to directory where videos will be saved.
    vmode: Verbose mode shows more output (from ffmpeg).
    vertpix: Number of pixels in verical dimension, if downsampling. Set to None, if full resolution.
    suffix_in: Suffix for source images or movies.
    suffix_out: Suffix for output movies
    ndigits: Number of digits in input image filenames
    prefix: Prefix at the start of each image filename
    imquality: Image quality (low to high: 0 to 1) for output video
    """

    # Loop thru each video listed in df
    for c_row in df.index:

        # String for experiment number
        exp_num = '0' + str(df.exp_num[c_row])

        # Paths for current output and input videos
        vid_outpath = vid_path + os.path.sep + df.date[c_row] + '_' + exp_num[-2:] + '.' + suffix_out
        image_path = im_path + os.path.sep + df.date[c_row]

        # Read number of frames from spreadsheet
        fr_start = int(df.start_imagename[c_row][len(prefix):])
        fr_end = int(df.end_imagename[c_row][len(prefix):])


        # Match output with input frame rate
        fps = df.fps[c_row]

        # Define ROI, if needed
        roi_x = df.roi_x[c_row]
        roi_y = df.roi_y[c_row]
        roi_w = df.roi_w[c_row]
        roi_h = df.roi_h[c_row]

        if not (roi_x == 'nan'):
            r = [int(float(roi_x)), int(float(roi_y)), int(float(roi_w)), int(float(roi_h))]
        else:
            r = None

        # Create movie
        vt.vid_from_seq(image_path, vid_outpath, frStart=fr_start, frEnd=fr_end, fps=fps, imQuality=imquality,
                        prefix=prefix, nDigits=ndigits, inSuffix=suffix_in, vertPix=vertpix,
                        roi=r, vMode=vmode)

        # Report counter
        print('Finished with ' + str(c_row + 1) + ' of ' + str(len(df)) + ' videos.')


def convert_videos(df, in_path, out_path, vmode=True, vertpix=None, imquality=0.35, suffix_in='MOV', suffix_out='mp4', maskpath=None):
    """ Uses videotools to convert videos from experiments

    df: dataframe generated by get_cat_info with the info needed for each video where analyze==1 and make_video==1.
    in_path: Path to input video file (without suffix).
    out_path: Path to output file (without suffix).
    vmode: Verbose mode shows more output (from ffmpeg)
    imquality: Image quality (low to high: 0 to 1) for output video
    suffix_in: Suffix for source images or movies
    suffix_out: Suffix for output movies
    """

    # Loop thru each video listed in df
    for c_row in df.index:

        # Define ROI, if needed
        roi_x = df.roi_x[c_row]
        roi_y = df.roi_y[c_row]
        roi_w = df.roi_w[c_row]
        roi_h = df.roi_h[c_row]

        if not (roi_x == 'nan'):
            r = [int(float(roi_x)), int(float(roi_y)), int(float(roi_w)), int(float(roi_h))]
        else:
            r = None

        # Total input path (video dir path + filename)
        tot_in_path = in_path + os.path.sep + df.video_filename[c_row] + '.' + suffix_in

        # Total output path (video dir path + filename)
        tot_out_path = out_path + os.path.sep + os.path.splitext(os.path.basename(in_path))[0] + '.' + suffix_out

        # Update status
        print('Converting video ' + str(c_row+1) + ' of ' + str(len(df)))

        # Create movie
        vt.vid_convert(tot_in_path, tot_out_path, imQuality=imquality, vertPix=vertpix,
                       roi=r, vMode=vmode, maskpath=maskpath)

        # Report counter
        print('Finished with ' + str(c_row + 1) + ' of ' + str(len(df)) + ' videos.')
